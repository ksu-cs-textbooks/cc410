<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://textbooks.cs.ksu.edu/cc410/i-oop/10-test-doubles/08-pytest-test-doubles/video/slides/index.html</link>
    <description>Add Mocks to Test Class from unittest.mock import patch&#xA;class TestClassroom:&#xA;# tests here Creating Fake Objects from unittest.mock import patch from people.Person import Person from people.Teacher import Teacher from places.Classroom import Classroom&#xA;class TestClassroom:&#xA;@patch(&#39;people.Teacher&#39;, spec=Teacher) @patch(&#39;people.Person&#39;, spec=Person) def test_classroom_has_teacher(self, fake_person, fake_teacher) -&gt; None: classroom: Classroom = Classroom() assert classroom.has_teacher == False&#xA;classroom.add_teacher(fake_teacher) assert classroom.has_teacher == True Adding a Method Stub @patch(&#39;people.Teacher&#39;, spec=Teacher) @patch(&#39;people.Person&#39;, spec=Person) def test_classroom_get_teacher_name(self, fake_person, fake_teacher) -&gt; None: # create a method stub for `get_name` method fake_teacher.get_name.return_value = &#34;Teacher Person&#34;&#xA;classroom: Classroom = Classroom() classroom.add_teacher(fake_teacher)&#xA;# assert that the classroom returns the teacher&#39;s name assert classroom.get_teacher_name() == &#34;Teacher Person&#34; Adding a Property Stub @patch(&#39;people.Teacher&#39;, spec=Teacher) @patch(&#39;people.Person&#39;, spec=Person) def test_classroom_get_teacher_name(self, fake_person, fake_teacher) -&gt; None: # create a property stub for `get_name` property type(fake_teacher).name = PropertyMock(return_value=&#34;Teacher Person&#34;)&#xA;classroom: Classroom = Classroom() classroom.add_teacher(fake_teacher)&#xA;# assert that the classroom returns the teacher&#39;s name assert classroom.get_teacher_name() == &#34;Teacher Person&#34; Static Classes @patch(&#39;people.Teacher&#39;, spec=Teacher) @patch(&#39;people.Person&#39;, spec=Person) def test_teacher_fails_minimum_age_requirement(self, fake_person, fake_teacher) -&gt; None: # create a fake version of the static method with patch.object(TeacherRules, &#39;get_minimum_age&#39;, return_value=16):&#xA;# Add a fake property to the teacher type(fake_teacher).age = PropertyMock(return_value=15) classroom: Classroom = Classroom()&#xA;with pytest.raises(ValueError): classroom.add_teacher(fake_teacher)</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/10-test-doubles/08-pytest-test-doubles/video/slides/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>