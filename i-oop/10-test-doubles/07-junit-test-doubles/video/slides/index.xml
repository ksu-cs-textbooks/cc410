<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://textbooks.cs.ksu.edu/cc410/i-oop/10-test-doubles/07-junit-test-doubles/video/slides/index.html</link>
    <description>Image Credit: Mockito&#xA;Install in Gradle dependencies { // Use JUnit Jupiter API for testing. testImplementation ..., &#39;org.mockito:mockito-inline:3.8.0&#39;, &#39;org.mockito:mockito-junit-jupiter:3.8.0&#39;&#xA;... } Add Mockito to Test Class import static org.junit.jupiter.api.Assertions.assertTrue; import static org.mockito.Mockito.when;&#xA;import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension;&#xA;@ExtendWith(MockitoExtension.class) public class UnitTestClass { // tests here } Use Strict Stubs import static org.junit.jupiter.api.Assertions.assertTrue; import static org.mockito.Mockito.when;&#xA;import org.junit.jupiter.api.Test; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoSettings; import org.mockito.quality.Strictness;&#xA;@MockitoSettings(strictness = Strictness.STRICT_STUBS) public class UnitTestClass { // tests here } Creating Fake Objects @MockitoSettings(strictness = Strictness.STRICT_STUBS) public class UnitTestClass {&#xA;@Mock Person mockPerson; @Mock Teacher mockTeacher;&#xA;public void testClassroomHasTeacher() { Classroom classroom = new Classroom() assertTrue(classroom.hasTeacher() == false);&#xA;classroom.addTeacher(mockTeacher); assertTrue(classroom.hasTeacher() == true); } } Adding a Stub @MockitoSettings(strictness = Strictness.STRICT_STUBS) public class ClassroomTest {&#xA;@Mock Person mockPerson; @Mock Teacher mockTeacher;&#xA;@Test public void testClassroomGetTeacherName() { // create a method stub for `getName` when(mockTeacher.getName()).thenReturn(&#34;Teacher Person&#34;);&#xA;Classroom classroom = new Classroom(); classroom.addTeacher(mockTeacher);&#xA;// assert that the classroom returns the teacher&#39;s name assertTrue(classroom.getTeacherName().equals(&#34;Teacher Person&#34;)); } } Static Classes @Test public void testTeacherFailsMinimumAgeRequirement() { // Create mock static class try (MockedStatic mockTeacherRules = Mockito.mockStatic(TeacherRules.class)) {&#xA;// Create method stub for static class mockTeacherRules.when(() -&gt; TeacherRules.getMinAge()).thenReturn(16);&#xA;// Create method stub for fake Teacher when(mockTeacher.getAge()).thenReturn(15);&#xA;// Test functionality Classroom classroom = new Classroom(); assertThrows(IllegalArgumentException.class, () -&gt; classroom.addTeacher(mockTeacher)); } }</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/10-test-doubles/07-junit-test-doubles/video/slides/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>