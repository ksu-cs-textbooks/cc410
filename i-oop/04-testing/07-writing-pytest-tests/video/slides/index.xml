<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://textbooks.cs.ksu.edu/cc410/i-oop/04-testing/07-writing-pytest-tests/video/slides/index.html</link>
    <description>pytest Tests from src.shapes.Square import Square&#xA;class TestSquare:&#xA;def test_square_constructor_should_set_length(self): square = Square(2.0) assert square.length == 2.0 pytest Parameterized Tests from src.shapes.Square import Square import pytest&#xA;class TestSquare:&#xA;@pytest.mark.parametrize(&#34;value&#34;, [1.0, 2.1, 3.2, 4.3, 5.9]) def test_set_length_to_positive_value(self, value): square = Square(value) assert square.length == value pytest Assertions assert &lt;boolean expression&gt; assert actual == pytest.approx(expected) assert actual is expected assert actual is None Catching Exceptions def test_zero_division(): with pytest.raises(ZeroDivisionError): calculator.divide(1, 0) Checking Output from pytest import CaptureFixture from _pytest.capture import CaptureResult from typing import Any from src.hello.HelloWorld import HelloWorld&#xA;def test_hello_world(self, capsys: CaptureFixture[Any]) -&gt; None: HelloWorld.main([&#34;HelloWorld&#34;]) captured: CaptureResult[Any] = capsys.readouterr() assert captured.out == &#34;Hello World\n&#34;, &#34;Unexpected Output&#34;</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/04-testing/07-writing-pytest-tests/video/slides/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>