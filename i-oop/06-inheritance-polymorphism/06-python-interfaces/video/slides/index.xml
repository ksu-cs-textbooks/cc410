<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/06-python-interfaces/video/slides/</link><description>Python Interfaces Set metaclass=abc.ABCMeta Implement __subclasshook__ method All methods and properties marked as @abc.abstractmethod No attributes No constructor, no code Python Interface Example import abc from typing import List class IMyQueue(metaclass=abc.ABCMeta): @classmethod def __subclasshook__(cls, subclass: type) -> bool: if cls is IMyQueue: attrs: List[str] = ['size'] callables: List[str] = ['enqueue', 'dequeue', 'peek'] ret: bool = True for attr in attrs: ret = ret and (hasattr(subclass, attr) and isinstance(getattr(subclass, attr), property)) for call in callables: ret = ret and (hasattr(subclass, call) and callable(getattr(subclass, call))) return ret else: return NotImplemented</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/06-python-interfaces/video/slides/index.xml" rel="self" type="application/rss+xml"/></channel></rss>