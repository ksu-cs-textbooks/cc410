<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/06-python-interfaces/video/slides/index.html</link>
    <description>Python Interfaces Set metaclass=abc.ABCMeta Implement __subclasshook__ method All methods and properties marked as @abc.abstractmethod No attributes No constructor, no code Python Interface Example import abc from typing import List&#xA;class IMyQueue(metaclass=abc.ABCMeta):&#xA;@classmethod def __subclasshook__(cls, subclass: type) -&gt; bool: if cls is IMyQueue: attrs: List[str] = [&#39;size&#39;] callables: List[str] = [&#39;enqueue&#39;, &#39;dequeue&#39;, &#39;peek&#39;] ret: bool = True for attr in attrs: ret = ret and (hasattr(subclass, attr) and isinstance(getattr(subclass, attr), property)) for call in callables: ret = ret and (hasattr(subclass, call) and callable(getattr(subclass, call))) return ret else: return NotImplemented&#xA;@property @abc.abstractmethod def size(self) -&gt; int: raise NotImplementedError&#xA;@abc.abstractmethod def enqueue(self, o: object) -&gt; None: raise NotImplementedError&#xA;@abc.abstractmethod def dequeue(self) -&gt; object: raise NotImplementedError&#xA;@abc.abstractmethod def peek(self) -&gt; object: raise NotImplementedError&#xA;Using a Python Interface class WaitingList(IMyQueue):&#xA;@property def size(self) -&gt; int: # code here&#xA;def enqueue(self, o: object) -&gt; None: #code here&#xA;def dequeue(self) -&gt; object: #code here&#xA;def peek(self) -&gt; object: #code here&#xA;Interfaces are Types wait: IMyQueue = WaitingList() wait.enqueue(Person()) wait.dequeue() We can call any methods&#xA;defined by the interface</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/06-python-interfaces/video/slides/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>