<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Inheritance :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/05-java-inheritance/index.html</link>
    <description>In an object-oriented language, inheritance is a mechanism for deriving part of a class definition from another existing class definition. This allows the programmer to “share” code between classes, reducing the amount of code that must be written.&#xA;Consider the Student class we created earlier:&#xA;public class Student { private int creditPoints; private int creditHours; private String first; private String last; // accessor methods for first and last omitted public Student(String first, String last) { this.first = first; this.last = last; } /** * Gets the student&#39;s grade point average. */ public double getGPA() { return ((double) creditPoints) / creditHours; } /** * Records a final grade for a course taken by this student. * * @param grade the grade earned by the student * @param hours the number of credit hours in the course */ public void addCourseGrade(Grade grade, int hours) { this.creditHours += hours; switch(grade) { case A: this.creditPoints += 4 * hours; break; case B: this.creditPoints += 3 * hours; break; case C: this.creditPoints += 2 * hours; break; case D: this.creditPoints += 1 * hours; break; case F: this.creditPoints += 0 * hours; break; } } } This would work well for representing a student. But what if we are representing multiple kinds of students, like undergraduate and graduate students? We’d need separate classes for each, but both would still have names and calculate their GPA the same way. So, it would be handy if we could say “an undergraduate is a student, and has all the properties and methods a student has” and “a graduate student is a student, and has all the properties and methods a student has.” This is exactly what inheritance does for us, and we often describe it as an is-a relationship. We distinguish this from the interface mechanism we looked at earlier by saying it is a strong is-a relationship, as an Undergraduate student is, for all purposes, also a Student.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/05-java-inheritance/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>