<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Inheritance :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/07-python-inheritance/index.html</link>
    <description>In an object-oriented language, inheritance is a mechanism for deriving part of a class definition from another existing class definition. This allows the programmer to “share” code between classes, reducing the amount of code that must be written.&#xA;Consider the Student class we created earlier:&#xA;class Student: def __init__(self, first: str, last: str) -&gt; None: self.__first: str = first self.__last: str = last self.__credit_points: int = 0 self.__credit_hours: int = 0 # properties for first and last omitted @property def gpa(self) -&gt; float: &#34;&#34;&#34;Gets the student&#39;s grade point average. &#34;&#34;&#34; return self.__credit_points / self.__credit_hours def add_course_grade(self, grade: Grade, hours: int) -&gt; None: &#34;&#34;&#34;Records a final grade for a course taken by this student. Args grade: the grade earned by the student hours: the number of credit hours in the course &#34;&#34;&#34; self.__credit_hours += hours if grade == Grade.A: self.__credit_points += 4 * hours elif grade == Grade.B: self.__credit_points += 3 * hours elif grade == Grade.C: self.__credit_points += 2 * hours elif grade == Grade.D: self.__credit_points += 1 * hours elif grade == Grade.F: self.__credit_points += 0 * hours This would work well for representing a student. But what if we are representing multiple kinds of students, like undergraduate and graduate students? We’d need separate classes for each, but both would still have names and calculate their GPA the same way. So, it would be handy if we could say “an undergraduate is a student, and has all the properties and methods a student has” and “a graduate student is a student, and has all the properties and methods a student has.” This is exactly what inheritance does for us, and we often describe it as an is-a relationship. We distinguish this from the interface mechanism we looked at earlier by saying it is a strong is-a relationship, as an Undergraduate student is, for all purposes, also a Student.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/06-inheritance-polymorphism/07-python-inheritance/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>