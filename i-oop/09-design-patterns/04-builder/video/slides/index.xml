<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://textbooks.cs.ksu.edu/cc410/i-oop/09-design-patterns/04-builder/video/slides/index.html</link>
    <description>Builder Pattern Build Complex Objects Separate Object Creation from Other Code Reduce Complex Links Between Objects Target Classes class Crayon:&#xA;String color class CrayonBox:&#xA;List[Crayon] contents&#xA;function addCrayon(Crayon c): contents.add(c) Builder Interface interface CrayonBoxBuilder:&#xA;function buildBox() Builder Class class EightBoxBuilder implements CrayonBoxBuilder:&#xA;function buildBox(): CrayonBox box = new CrayonBox() box.add(new Crayon(&#34;White&#34;)) box.add(new Crayon(&#34;Black&#34;)) box.add(new Crayon(&#34;Red&#34;)) box.add(new Crayon(&#34;Orange&#34;)) box.add(new Crayon(&#34;Yellow&#34;)) box.add(new Crayon(&#34;Green&#34;)) box.add(new Crayon(&#34;Blue&#34;)) box.add(new Crayon(&#34;Violet&#34;)) Builder Class class SixteenBoxBuilder implements CrayonBoxBuilder:&#xA;function buildBox(): CrayonBox box = new CrayonBox() box.add(new Crayon(&#34;White&#34;)) box.add(new Crayon(&#34;Black&#34;)) box.add(new Crayon(&#34;Red&#34;)) box.add(new Crayon(&#34;Dark Red&#34;)) box.add(new Crayon(&#34;Blue Green&#34;)) box.add(new Crayon(&#34;Sunbeam&#34;)) box.add(new Crayon(&#34;Sky Blue&#34;)) box.add(new Crayon(&#34;Royal Purple&#34;)) box.add(new Crayon(&#34;Tan&#34;)) box.add(new Crayon(&#34;Brown&#34;)) box.add(new Crayon(&#34;Pink&#34;)) box.add(new Crayon(&#34;Eggshell&#34;)) ... Using the Builder class Main:&#xA;function main(): CrayonBoxBuilder builder = new SixteenBoxBuilder() CrayonBox box = builder.buildBox() Factory Method Pattern Get Objects By Name/Enum/ID Don&#39;t Need Underlying Type Easily Modify Factory Class Decoupled Architecture Factory Method Class class CrayonBoxFactory:&#xA;function getBox(int size): if size == 8: return new EightBoxBuilder().buildBox() else if size == 16: return new SixteenBoxBuilder().buildBox() else if size == 32: return new ThirtyTwoBoxBuilder().buildBox() else if size == 48: return new FortyEightBoxBuilder().buildBox() ... Using the Factory Method class Main:&#xA;function main(): CrayonBoxFactory factory = new CrayonBoxFactory() CrayonBox box = factory.getBox(16) Singleton Pattern Only One Instance Conserve Resources Globally Shared State Alternative to Static Singleton Class class CrayonBoxFactorySingleton:&#xA;static CrayonBoxFactorySingleton instance = null&#xA;static function getInstance(): if instance is null: instance = new CrayonBoxFactorySingleton() return instance&#xA;function getBox(int size): if size == 8: return new EightBoxBuilder().buildBox() else if size == 16: return new SixteenBoxBuilder().buildBox() ... Using the Factory Singleton class Main:&#xA;function main(): CrayonBox box = CrayonBoxFactorySingleton.getInstance().getBox(16) Creational Patterns Simplify Building Objects Reduce Links Between Classes Don&#39;t Repeat Yourself (DRY) Easily Add New Types of Items Think About Imports</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/i-oop/09-design-patterns/04-builder/video/slides/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>