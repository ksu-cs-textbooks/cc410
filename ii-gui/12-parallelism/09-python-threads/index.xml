<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Threads :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/ii-gui/12-parallelism/09-python-threads/index.html</link>
    <description>Python includes several methods for creating threads. The simplest and most flexible is to create a new Thread object using the threading library. When that object is created, we can give it a function to use as a starting point for the thread.&#xA;Here’s a quick example of threads in Python:&#xA;import threading import time import sys class MyThread: def __init__(self, name): &#34;&#34;&#34;Constructor. Args: name: the name of the thread &#34;&#34;&#34; self.__name = name def run(self): &#34;&#34;&#34;Thread method.&#34;&#34;&#34; for i in range(0, 3): print(&#34;{} : iteration {}&#34;.format(self.__name, i)) # tell the OS to wake this thread up after at least 1 second time.sleep(1) @staticmethod def main(args): # create threads t1_object = MyThread(&#34;Thread 1&#34;) thread1 = threading.Thread(target=t1_object.run) t2_object = MyThread(&#34;Thread 2&#34;) thread2 = threading.Thread(target=t2_object.run) t3_object = MyThread(&#34;Thread 3&#34;) thread3 = threading.Thread(target=t3_object.run) # start threads print(&#34;main: starting threads&#34;) thread1.start() thread2.start() thread3.start() # wait until all threads have terminated print(&#34;main: joining threads&#34;) thread1.join() thread2.join() thread3.join() print(&#34;main: all threads terminated&#34;) # main guard if __name__ == &#34;__main__&#34;: MyThread.main(sys.argv) Let’s look at this code piece by piece so we fully understand how it works.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/ii-gui/12-parallelism/09-python-threads/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>