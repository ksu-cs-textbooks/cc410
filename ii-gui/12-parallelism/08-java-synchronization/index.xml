<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Synchronization :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/ii-gui/12-parallelism/08-java-synchronization/index.html</link>
    <description>Next, let’s look at a quick example of a race condition in Java, just so we can see how it could occur in our code.&#xA;Poorly Designed Multithreading First, let’s consider this example:&#xA;public class MyData { public int x; } import java.lang.Runnable; import java.lang.Thread; import java.lang.InterruptedException; public class MyThread implements Runnable { private String name; private static MyData data; /** * Constructor. * * @param name the name of the thread */ public MyThread(String name) { this.name = name; } /** * Thread method. * * &lt;p&gt;This is called when the thread is started. */ @Override public void run() { for (int i = 0; i &lt; 3; i++) { int y = data.x; // tell the OS it is ok to switch to another thread here Thread.yield(); data.x = y + 1; System.out.println(this.name + &#34; : data.x = &#34; + data.x); } } /** * Main Method. */ public static void main(String[] args) { // create data data = new MyData(); // create threads Thread thread1 = new Thread(new MyThread(&#34;Thread 1&#34;)); Thread thread2 = new Thread(new MyThread(&#34;Thread 2&#34;)); Thread thread3 = new Thread(new MyThread(&#34;Thread 3&#34;)); // start threads System.out.println(&#34;main: starting threads&#34;); thread1.start(); thread2.start(); thread3.start(); // wait until all threads have terminated System.out.println(&#34;main: joining threads&#34;); try { thread1.join(); thread2.join(); thread3.join(); } catch (InterruptedException e){ System.out.println(&#34;main thread was interrupted&#34;); } System.out.println(&#34;main: all threads terminated&#34;); System.out.println(&#34;main: data.x = &#34; + data.x); } } Explanation In this example, we are creating a static instance of the MyData class, which can act as a shared memory object for this example. Then, in each of the threads, we are performing this three-step process:</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/ii-gui/12-parallelism/08-java-synchronization/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>