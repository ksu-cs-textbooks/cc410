<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Video :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/z-examples/11-web-basics/03-video/index.html</link>
    <description>Java Run project once to see what it does. Explore code and show JSON loader and Movie class. Go to start.spring.io and get a build.gradle file from there. Use it to update the one in the starter project. Create movies.web package. Create Web.java in movies and MoviesController.java in movies.web. Copy code from WebApplication.java file in Spring Initializr to Web.java and adjust Set main class in build.gradle to movies.Web Create controller in MoviesController.java and configure home page. Create resources folder in the src/main directory. Add a static and templates folder inside. Create an index.html file inside of the templates directory. Run project and see how it looks. gradle bootRun Configure the .codio file to add a new tab at the top. Port 8080! Create layout file layout.html as a basic layout. Update index.html to use layout. Test! Add greeting paths to Controller &amp; create greeting template. Test! Update index.html route to list movies in a UL. Test! Update index.html to have more HTML and data. Update index.html to have CSS classes and then add CSS file to Layout. It goes in static folder. Add ratings and more CSS. Add Bootstrap stuff. REMIND THEM TO MAKE about page! Play around with Bootstrap stuff! Python Run project once to see what it does. Explore code and show JSON loader and Movie class. Add flask and flask-classful dependencies and install. Remind to use tox -r once. Create movies.web package. Create Web.py in movies and MoviesController.py in movies.web. Build Web.py to launch Flask app Set main class in __main__.py to movies.Web and update __init__.py to load the app. Configure the app using export FLASK_APP=&#34;src&#34; Create controller in MoviesController.java and configure home page. Create a static and templates folders inside src/movies directory. Create an index.html file inside of the templates directory. Run project and see how it looks. python3 -m flask run --host=0.0.0.0 Configure the .codio file to add a new tab at the top. Port 5000! Install python-dotenv and create .flaskenv file Create layout file layout.html as a basic layout. Update index.html to use layout. Test! Add greeting paths to Controller &amp; create greeting template. Test! Update index.html route to list movies in a UL. Test! Update index.html to have more HTML and data. Update index.html to have CSS classes and then add CSS file to Layout. It goes in static folder. Add ratings and more CSS. Add Bootstrap stuff. REMIND THEM TO MAKE about page! Play around with Bootstrap stuff!</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/z-examples/11-web-basics/03-video/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>