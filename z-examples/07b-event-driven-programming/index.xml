<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Event-Driven Programming :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/index.html</link>
    <description>In this example project, we’ll go through the steps of modifying our previously created GUI and adding in the code to handle events generated by users clicking on various buttons. This will allow us to construct an order of several sundaes within our GUI.&#xA;We’ll also add some simple unit tests to verify that our GUI is correctly populated by the object it is given, and that it correctly updates the object when saving it.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assignment Requirements</title>
      <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/01-requirements/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/01-requirements/index.html</guid>
      <description>This page lists the example project requirements for Example 7B in CC 410. Read the requirements carefully and discuss any questions with the instructors or TAs.&#xA;Purpose This example will cover updating an existing GUI to handle events, as well as adding some unit tests for our GUI panels.&#xA;General Requirements All code must be object-oriented. All executable code must be within a class Python package files such as __init__.py and __main__.py are exempt. Classes must be organized into packages based on common usage. This project must include automation for compilation and execution. Java: Use Gradle with the application and jacoco plugins. The project should compile without errors. Python: Use tox configured to use Python 3.10 and a requirements file to install libraries. All code must properly compile or be interpreted. Java: It must compile using Gradle. Python: It must be interpreted using Python 3.10. Where specified, type hints should be included in the code, and all code should pass a strict Mypy type check. There are instances where Mypy is unable to determine the type of lambda expressions used as commands with buttons. This error can be ignored. Unit tests for TheChocoPanel and TheClassicPanel are required. Documentation comments are not required for this example, but they are recommended for your own use. All code submitted must be free of style errors. We will be using the Google Style Guide for each language. Style errors related to documentation comments (or lack thereof) will be ignored. Java: Use Checkstyle 10.6.0+ and the Google Style Configuration. You may modify the configuration to allow 4 space indentations instead of 2 space indentations. Python: Use Flake8 with the flake8-docstrings and pep8-naming plugins. Code should conform to PEP 8 style with Google style docstrings. Submissions to Canvas should be tagged GitHub releases that are numbered according to Semantic Versioning. Assignment Requirements This milestone should include the following new GUI features:</description>
    </item>
    <item>
      <title>Java</title>
      <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/02-java/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/02-java/index.html</guid>
      <description>Part 1 Part 2 Gradle Changes The build.gradle file includes the library for JUnit5 parameterized tests:&#xA;dependencies { // Use JUnit Jupiter API for testing. testImplementation &#39;org.junit.jupiter:junit-jupiter-api:5.6.2&#39;, &#39;org.hamcrest:hamcrest:2.2&#39;, &#39;org.junit.jupiter:junit-jupiter-params&#39; // Use JUnit Jupiter Engine for testing. testRuntimeOnly &#39;org.junit.jupiter:junit-jupiter-engine&#39; // This dependency is used by the application. implementation &#39;com.google.guava:guava:29.0-jre&#39; } Outline Here is a basic outline of the steps to follow to complete this example.</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/02-python/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/z-examples/07b-event-driven-programming/02-python/index.html</guid>
      <description>Part 1 Part 2 Tox Changes The tox.ini file has been updated to allow testing with a display, and will now run the full unit test suite.&#xA;[testenv] deps = -rrequirements.txt ignore_errors = True passenv = DISPLAY commands = python3 -m mypy -p src --html-report reports/mypy python3 -m coverage run --source src -m pytest --html=reports/pytest/index.html python3 -m coverage html -d reports/coverage python3 -m flake8 --docstring-convention google --format=html --htmldir=reports/flake Outline Here is a basic outline of the steps to follow to complete this example.</description>
    </item>
  </channel>
</rss>