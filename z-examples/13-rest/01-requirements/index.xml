<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assignment Requirements :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/z-examples/13-rest/01-requirements/index.html</link>
    <description>This page lists the example project requirements for Example 13 in CC 410. Read the requirements carefully and discuss any questions with the instructors or TAs.&#xA;Purpose This example will cover updating an existing project to allow editing and deleting of movies following a RESTful architectural style.&#xA;General Requirements All code must be object-oriented. All executable code must be within a class Python package files such as __init__.py and __main__.py are exempt. Classes must be organized into packages based on common usage. This project must include automation for compilation and execution. Java: Use Gradle with the application and jacoco plugins. The project should compile without errors. Python: Use tox configured to use Python 3.10 and a requirements file to install libraries. All code must properly compile or be interpreted. Java: It must compile using Gradle. Python: It must be interpreted using Python 3.10. Where specified, type hints should be included in the code, and all code should pass a strict Mypy type check. There are instances where Mypy is unable to determine the type of lambda expressions used as commands with buttons. This error can be ignored. Unit tests are not required. Documentation comments are not required for this example, but they are recommended for your own use. All code submitted must be free of style errors. We will be using the Google Style Guide for each language. Style errors related to documentation comments (or lack thereof) will be ignored. Java: Use Checkstyle 10.6.0+ and the Google Style Configuration. You may modify the configuration to allow 4 space indentations instead of 2 space indentations. Python: Use Flake8 with the flake8-docstrings and pep8-naming plugins. Code should conform to PEP 8 style with Google style docstrings. All HTML must conform to the HTML5 standard. Use the W3C Validator to check your rendered pages if desired. Submissions to Canvas should be tagged GitHub releases that are numbered according to Semantic Versioning. Assignment Requirements This milestone should include a new controller RestMovieContoller that follows a RESTful architectural style. Specifically, it should include the following URL routes:</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/z-examples/13-rest/01-requirements/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>