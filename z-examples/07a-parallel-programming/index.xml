<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parallel Programming :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/index.html</link>
    <description>In this example project, we’ll explore some concepts related to parallel programming. You won’t be expected to actually create a fully parallel program in this course, but it is helpful to explore these concepts and see how they impact our program’s performance.&#xA;The next page will discuss the overall requirements that this example project should include. After that, there is a page for each programming language with some basic steps and a video to walk you through the whole process.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assignment Requirements</title>
      <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/01-requirements/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/01-requirements/index.html</guid>
      <description>This page lists the example project requirements for Example 7A in CC 410. Read the requirements carefully and discuss any questions with the instructors or TAs.&#xA;Purpose This example will cover some concepts related to parallel programming. This is meant to be an exploratory project only, so requirements are very loose.&#xA;General Requirements No style or documentation requirements will be enforced for this example. Assignment Requirements ParallelOne Update ParallelOne following the video to use 4 Threads. Run the program a few times and observe a race condition. Take a screenshot of the race condition and store it in a file named race in the project folder. Update ParallelOne to properly use locks to prevent a race condition. Run the program a few times and verify that no race condition occurs. Take a screenshot of the program running correctly and store it in a file named lock in the project folder. See Take a Screenshot on Wikihow for details on how to take a screenshot. On Windows, you can use the “Snipping Tool” to grab only a portion of the screen. See Uploading Files in the Codio documentation for how to upload a screenshot. ParallelTwo Update ParallelTwo following the video to handle blocking and an arbitrary number of threads. Run the program with varying numbers of threads (1 - 10 recommended) and graph the number of threads vs. the time taken. Submit your graph as an image file named graph in the project folder. See How to Make a Single Line Graph in Excel for instructions. Based on the results of the ParallelTwo exercise, write a short blurb in a README.md file in the project folder: How did the number of threads impact amount of time taken to complete the work? What does that result tell us about the hardware available on the Codio system? See below for some example screenshots and graphs. The sample graph shows results for both Java and Python, but your graph will only include one language.</description>
    </item>
    <item>
      <title>Java</title>
      <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/02-java/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/02-java/index.html</guid>
      <description>Outline Here is a basic outline of the steps to follow to complete this example.&#xA;Clone Starter Code from GitHub git clone &lt;url&gt; java Update ParallelOne to use 4 threads.&#xA;Take a screenshot showing a race condition.&#xA;Update ParallelOne to use a lock.&#xA;Take a screenshot showing no race condition.&#xA;Update ParallelTwo to use blocking and an arbitrary number of threads.</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/02-python/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/z-examples/07a-parallel-programming/02-python/index.html</guid>
      <description>Outline Here is a basic outline of the steps to follow to complete this example.&#xA;Clone Starter Code from GitHub git clone &lt;url&gt; python Update ParallelOne to use 4 threads.&#xA;Take a screenshot showing a race condition.&#xA;Update ParallelOne to use a lock.&#xA;Take a screenshot showing no race condition.&#xA;Update ParallelTwo to use blocking and an arbitrary number of threads.</description>
    </item>
  </channel>
</rss>