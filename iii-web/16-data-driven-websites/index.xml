<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data-Driven Websites :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/index.html</link>
    <description>From desktop GUIs to the World Wide Web!</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Jun 2024 14:13:48 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/01-introduction/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/01-introduction/index.html</guid>
      <description>Up to this point, we’ve mainly focused on developing an application that can be executed locally on a computer. To use an application like this, users would have to download it and possibly install it on their system. Likewise, as developers, we’ll have to create a release that they can install, and we may have to make sure that the release is compatible with various different operating systems and computer architectures.</description>
    </item>
    <item>
      <title>HTML</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/02-html/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/02-html/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;Video Materials&#xA;The World Wide Web was the brainchild of Sir Tim Berners-Lee. It was conceived as a way to share information across the Internet; in Sir Berners-Lee’s own words describing the idea as he first conceived it:</description>
    </item>
    <item>
      <title>CSS</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/03-css/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/03-css/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;Cascading Style Sheets (CSS) is the second core web technology of the web. It defines the appearance of web pages by applying stylistic rules to matching HTML elements. CSS is normally declared in a file with the .css extension, separate from the HTML files it is modifying, though it can also be declared within the page using the &lt;style&gt; element, or directly on an element using the style attribute.</description>
    </item>
    <item>
      <title>JavaScript</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/04-javascript/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/04-javascript/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;JavaScript (or ECMAScript, which is the standard JavaScript is derived from), was originally developed for Netscape Navigator by Brendan Eich. The original version was completed in just 10 days. The name “JavaScript” was a marketing move by Netscape as they had just secured the rights to use Java Applets in their browser, and wanted to tie the two languages together. Similarly, they pushed for a Java-like syntax, which Brendan accommodated. However, he also incorporated functional behaviors based on the Scheme language, and drew upon Self’s implementation of object-orientation. The result is a language that may look familiar to you, but often works in unexpected ways.</description>
    </item>
    <item>
      <title>HTTP</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/05-http/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/05-http/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;Video Materials&#xA;At the heart of the world wide web is the Hypertext Transfer Protocol (HTTP). This is a protocol defining how HTTP servers (which host web pages) interact with HTTP clients (which display web pages).</description>
    </item>
    <item>
      <title>Static Web Servers</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/06-static-web-servers/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/06-static-web-servers/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;Now that we’ve learned about all of the core technologies used to create and deliver webpages, let’s take a deeper look at the software that runs on the servers that are responsible for receiving HTTP requests and responding to them. We typically call these programs web servers.</description>
    </item>
    <item>
      <title>Dynamic Web Pages</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/07-dynamic-web-pages/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/07-dynamic-web-pages/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;Modern websites are more often full-fledged applications than collections of static files. These applications remain built upon the foundations of the core web technologies of HTML, CSS, and JavaScript. In fact, the client-side application is typically built of exactly these three kinds of files! So how can we create a dynamic web application?</description>
    </item>
    <item>
      <title>Template Rendering</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/08-template-rendering/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/08-template-rendering/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;It was not long before new technologies sprang up to replace the ad-hoc string concatenation approach to creating dynamic pages. These template approaches allow you to write a page using primarily HTML, but embed snippets of another language to execute and concatenate into the final page. This is very similar to the formatted strings we’ve used in Java and Python, i.e.:</description>
    </item>
    <item>
      <title>Web Frameworks</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/09-web-frameworks/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/09-web-frameworks/index.html</guid>
      <description>Content Note Much of the content in this page was adapted from Nathan Bean’s CIS 400 course at K-State, with the author’s permission. That content is licensed under a Creative Commons BY-NC-SA license.&#xA;Video Materials&#xA;As web sites became web applications, developers began looking to use ideas and techniques drawn from traditional software development. These included architectural patterns like Model-View-Controller (MVC) and Pipeline that simply were not possible with the server page model. The result was the development of a host of web frameworks across multiple programming languages, including:</description>
    </item>
    <item>
      <title>Request &amp; Response</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/10-request-response/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/10-request-response/index.html</guid>
      <description>Earlier in this chapter, we discussed how HTTP is a request-response protocol, as shown in this diagram:&#xA;We also discussed how we could write a simple dynamic program to generate a response by concatenating strings together. It was definitely not efficient, but it demonstrated that it is possible to dynamically generate a response to a web request.</description>
    </item>
    <item>
      <title>Routing</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/11-routing/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/11-routing/index.html</guid>
      <description>Of course, one major question that we still need to resolve is “how does the web framework look at a web request and determine what code to execute?” To do that, most web frameworks introduce the concept of routing.&#xA;In a web framework, a route is usually a mapping from a path to a particular function in a controller.&#xA;For example, a simple web framework might match the path /, representing the top level page on the server, to a function called getIndex() in one of the controllers in the web application itself.</description>
    </item>
    <item>
      <title>Template Inheritance</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/12-template-inheritance/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/12-template-inheritance/index.html</guid>
      <description>One thing you may have also noticed is that many web applications use the same layout across many different pages. Since each page in a web framework requires a different template, it could be very difficult to make sure that each of those pages includes the same information, and updating them would be a major hassle if there were several hundred or thousands of pages in the application.&#xA;Thankfully, most web frameworks also include the ability for templates to be composed of other templates. In that way, we can create a hierarchical structure of templates, and even create smaller templates that we can reuse over and over again in our code.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/13-summary/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/16-data-driven-websites/13-summary/index.html</guid>
      <description>In this chapter, we covered the background content for working with web applications. We learned about HTML, CSS and JavaScript, the three core technologies used on the World Wide Web today. We also learned about HTTP, the protocol used to request a website from a web server and then receive a response from that server.&#xA;We then explored static web pages, which made up the majority of the World Wide Web in the early days. However, as the web became more commonplace, the need for dynamic web pages increased. Initially, that process was very rudimentary, but eventually many web frameworks were created to simplify that process.</description>
    </item>
  </channel>
</rss>