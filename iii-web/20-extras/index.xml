<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extras :: CC 410 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/index.html</link>
    <description>Everything that didn’t fit anywhere else!</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 May 2024 10:44:43 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/01-introduction/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/01-introduction/index.html</guid>
      <description>We’ve covered lots of new topics in this course, but there are always important ideas that get left out or don’t fit anywhere else. So, in this final chapter of the book, we’ll look at some one-off topics and concepts that we feel are important to cover in this course. For many students, this course serves as a capstone programming course, and we want to make sure you are well prepared as a programmer in the future.</description>
    </item>
    <item>
      <title>Generics in Java</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/02-java-generics/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/02-java-generics/index.html</guid>
      <description>One major topic in the Java programming language that we’ve made use of but haven’t really explained is the use of generic types. A generic type is a class or interface that can accept a parameter for the type of object that it stores. A great example is the LinkedList class that we are very familiar with. When working with a class that supports generic types, we provide the type parameter in angle brackets &lt;&gt; as in this example:</description>
    </item>
    <item>
      <title>Generics in Python</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/03-python-generics/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/03-python-generics/index.html</guid>
      <description>One major topic in the Python programming language that we’ve made use of but haven’t really explained is the use of generic types. A generic type is a class or interface that can accept a parameter for the type of object that it stores. A great example is the List class that we are very familiar with. When providing type hints for a list class, we can provide the type that should be stored in the class in square brackets []:</description>
    </item>
    <item>
      <title>Software Development Life Cycles</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/04-software-development-life-cycle/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/04-software-development-life-cycle/index.html</guid>
      <description>One major topic that this course doesn’t cover is software engineering. Software engineering is all about applying practices from the field of engineering to the development of software. So, while it also includes things such as program architecture, programming paradigms, and design patterns, which we do cover in this course, software engineering also includes many other topics related to the process of developing, operating, testing, and maintaining software.&#xA;One of the major topics in software engineering is the Software Development Life Cycle, sometimes abbreviated as SDLC or referred to as the Software Development Process. This is all about how we actually design and build software, going from the initial idea, all the way through design, development, testing, maintenance, updates, and more. There are entire courses and books dedicated to this topic, and it is an area of constant study and improvement for software developers of all skill levels.</description>
    </item>
    <item>
      <title>Requirements Elicitation</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/05-requirements-elicitation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/05-requirements-elicitation/index.html</guid>
      <description>On the previous page, we discussed the software development life cycle. One of the most important, and often overlooked, steps in those processes is requirements elicitation. Requirements elicitation is all about determining what the users or customers want from a piece of software that is being developed. While this might sound simple, it can actually be one of the most difficult steps in the whole process. In addition, since it is generally the first step in any new software development task, getting this step right can make everything work smoothly, whereas even a small problem at this step can cause the entire project to fail.</description>
    </item>
    <item>
      <title>Security</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/06-security/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/06-security/index.html</guid>
      <description>Another major concept to be aware of as a programmer is security. Computer systems today store large amounts of sensitive data, and hackers are always trying to access data and resources they should not have access to. Many times, their ability to access that data is due to a mistake or oversight on the part of a programmer, sometimes made months or even years prior. It could even have been due to some completely new situation that wasn’t at all a concern when the program was originally written.</description>
    </item>
    <item>
      <title>Résumés &amp; Certifications</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/07-resumes-certifications/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/07-resumes-certifications/index.html</guid>
      <description>Now that you have some programming knowledge and skill, you might consider looking for a job that makes use of those skills. So, let’s take a look at some related information that might be useful to you in that path.&#xA;Technical Résumés A résumé for a technical career field such as programming can be quite a bit different from résumés in other fields. This is mainly because a technical résumé should cover more than just work experience, including projects, programming skills, technical knowledge, and more. While there are many guides online for building a technical résumé, here are a few things that you might want to consider including:</description>
    </item>
    <item>
      <title>Integrated Development Environments</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/08-ides/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/08-ides/index.html</guid>
      <description>We’ve been using Codio as our development environment throughout this program, mainly because it is purposely designed to provide a great educational experience for novice programmers, while allowing instructors easy access to help students when they get stuck. We have also made use of the automated grading features available in Codio throughout this program.&#xA;However, outside of these courses, you won’t have access to Codio and will instead need to find another tool to help you develop your programs. These tools are collectively called Integrated Development Environments, or IDEs, and are the primary tool in a programmer’s toolbox. Let’s look at a few options you might want to consider using in the future.</description>
    </item>
    <item>
      <title>Programming Resources</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/09-programming-resources/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/09-programming-resources/index.html</guid>
      <description>Finally, it is very important for programmers to always stay on top of new developments and technologies, and it can seem like a daunting task to even know where to look. Let’s review some of the resources that are commonly used by programmers to keep up with the latest news and learn about technologies that they may want to use.&#xA;News Sites There are many news sites on the web that focus specifically on news related to technology and programming. We encourage you to search around and find sites that are relevant to you and your interest, but here are a few of the more well-known sites:</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/10-summary/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc410/iii-web/20-extras/10-summary/index.html</guid>
      <description>This chapter covers many helpful topics in programming that don’t fit neatly anywhere else in the book. We hope that a few of these items will be useful to you as you continue to build your programming skill.&#xA;Review Quiz Check your understanding of the new content introduced in this chapter below - this quiz is not graded and you can retake it as many times as you want.&#xA;---&#xD;primaryColor: &#39;#512888&#39;&#xD;secondaryColor: &#39;#cccccc&#39;&#xD;textColor: black&#xD;shuffleQuestions: true&#xD;shuffleAnswers: true&#xD;locale: en&#xD;---&#xD;# Generic Types&#xD;A **generic type** is best described by which of the following statements?&#xD;1. [X] A class that accepts a parameter for the type of object it stores&#xD;1. [ ] A list that stores the generic `Object` type&#xD;1. [ ] A data type that can store both strings and numbers&#xD;1. [ ] A file format that serializes any type of data&#xD;# Generic Type Code&#xD;When a generic type is represented in code, we typically use what letter as its variable name?&#xD;1. [X] T&#xD;1. [ ] S&#xD;1. [ ] X&#xD;1. [ ] A&#xD;# Software Development Lifecycle&#xD;Place the following steps of the **Software Development Life Cycle (SDLC)** in the correct order based on the diagram in the textbook? (Click and drag to reorder elements)&#xD;1. Requirements&#xD;2. Design&#xD;3. Development&#xD;4. Testing&#xD;5. Deployment &amp; Maintenance&#xD;# SDLC Method 1&#xD;Which of the following software development methodologies is shown in this diagram?&#xD;![Image 1](/cc410/images/20/waterfall.svg)&#xD;1. [X] Waterfall&#xD;1. [ ] Iterative &amp; Incremental Development&#xD;1. [ ] Spiral&#xD;1. [ ] Agile&#xD;# SDLC Method 2&#xD;Which of the following software development methodologies is shown in this diagram?&#xD;![Image 2](/cc410/images/20/iter_wiki.svg)&#xD;1. [ ] Waterfall&#xD;1. [X] Iterative &amp; Incremental Development&#xD;1. [ ] Spiral&#xD;1. [ ] Agile&#xD;# SDLC Method 3&#xD;Which of the following software development methodologies is shown in this diagram?&#xD;![Image 3](/cc410/images/20/spiral.svg)&#xD;1. [ ] Waterfall&#xD;1. [ ] Iterative &amp; Incremental Development&#xD;1. [X] Spiral&#xD;1. [ ] Agile&#xD;# SDLC Method 3&#xD;Which of the following software development methodologies is discussed in this quote?&#xD;&gt; … we have come to value: Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan&#xD;1. [ ] Waterfall&#xD;1. [ ] Iterative &amp; Incremental Development&#xD;1. [ ] Spiral&#xD;1. [X] Agile&#xD;# Defensive Programming&#xD;The art of **defensive programming** is best described by which statement?&#xD;1. [ ] Writing programs work as expected even when bad input is received&#xD;1. [ ] Writing programs that protects user data&#xD;1. [ ] Developing software using encrypted source code&#xD;1. [ ] Storing data only in secure memory</description>
    </item>
  </channel>
</rss>